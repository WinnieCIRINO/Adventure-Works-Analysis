USE MiniProject4_AdventureWorks

-- Joining the SalesData tables
SELECT * 
INTO SalesTable
	 FROM SalesData_2020
	 UNION ALL
	 SELECT * FROM SalesData_2021
	 UNION ALL
	 SELECT * FROM SalesData_2022

/* 1. Retrieve the customers who have placed orders with a total amount greater 
than $10000. */

--Customers with orders greater than $10,000

SELECT SalesTable.CustomerKey ,
       CONCAT (Customer.FirstName, ' ', Customer.LastName) AS 'Full Names',
       ROUND (SUM(SalesTable.OrderQuantity * Products.ProductPrice),2) AS 'Total Amount'
FROM SalesTable
JOIN Products ON  SalesTable.ProductKey = Products.ProductKey
JOIN Customer ON  Customer.CustomerKey = SalesTable.CustomerKey
GROUP BY SalesTable.CustomerKey, Customer.FirstName , Customer.LastName
HAVING SUM (SalesTable.OrderQuantity * Products.ProductPrice) >10000

-- 2. Retrieve the total revenue and total orders generated by each product category
-- Total Revenue and total orders generated by each product catergory

SELECT PS.ProductCategoryKey , PC.CategoryName,
       SUM(P.ProductPrice) AS 'Total Revenue',
	   COUNT(ST.OrderQuantity) As 'Total Orders'
FROM SalesTable ST
JOIN Products P ON ST.ProductKey = P.ProductKey
JOIN Product_SubCatergory PS ON PS.ProductSubcategoryKey = P.ProductSubcategoryKey
JOIN Product_Catergory PC ON PS.ProductCategoryKey = PC.ProductCategoryKey
GROUP BY PC.CategoryName, PS.ProductCategoryKey

/* 3. Retrieve the names of products and their categories for products with a 
selling price greater than the average selling price of all products. - SQ*/

/*3. Names of Products, their catergories where selling price is
greater than average selling price of all products*/
SELECT P.ProductName , PC.CategoryName,  PS.SubcategoryName, P.ProductPrice
FROM Products P
JOIN Product_SubCatergory PS ON PS.ProductSubcategoryKey = P.ProductSubcategoryKey
JOIN Product_Catergory PC ON PC.ProductCategoryKey = PS.ProductCategoryKey
WHERE P.ProductPrice >  (SELECT ROUND (AVG( ProductPrice),2) FROM Products )

-- 4.  How many customers have placed orders in “Canada”? List the customer names - SQ
--Names and Number of Customers who placed orders in "Canada"

SELECT COUNT (ST.OrderNumber) AS 'No. of Customers with orders in Canada'
	       FROM SalesTable ST
		   JOIN Territory T ON T.SalesTerritoryKey = ST.TerritoryKey
		   WHERE T.Region = 'Canada'

SELECT DISTINCT FirstName, LastName AS 'Customer Names with Orders in Canada'
FROM Customer C
JOIN SalesTable ST ON ST.CustomerKey = C.CustomerKey
JOIN Territory T ON T.SalesTerritoryKey = ST.TerritoryKey
WHERE T.Region = 'Canada'

/*5.  Find the 10 products that have been returned the most. How much money 
was generated by these products? - SQ */

--The 10 Products returned most and the revenue they generated
SELECT TOP 10 ProductName , COUNT (P.ProductKey) AS 'No. of Products Returned'
FROM Products P
JOIN ReturnsData RD ON RD.ProductKey = P.ProductKey
GROUP BY ProductName, P.ProductKey
ORDER BY COUNT (P.ProductKey) DESC

SELECT  SUM (ProductName) , COUNT (P.ProductKey) AS 'No. of Products Returned'
FROM Products P
JOIN ReturnsData RD ON RD.ProductKey = P.ProductKey
GROUP BY ProductName, P.ProductKey
ORDER BY COUNT (P.ProductKey) DESC

-- Get a list of customers who have placed orders in more than one territory.
SELECT ST.CustomerKey,
       CONCAT(FirstName, '  ',  LastName) AS 'Full Names'
	   COUNT(DISTINCT TerritoryKey) AS 'Territory Count'
FROM SalesTable ST 
JOIN Customer C ON C.CustomerKey = S.CustomerKey
JOIN Territory T ON T.SalesTerritoryKey = S.TerritoryKey
GROUP BY CONCAT(FirstName, ' ', LastName), S.CustomerKey
HAVING COUNT(DISTINCT S.TerritoryKey)>1

JOIN (SELECT TOP 10 ProductKey, COUNT (ProductKey) AS 'No. of Returns'
FROM ReturnsData
GROUP BY ProductKey
ORDER BY COUNT(ProductKey) DESC) RD ON RD.ProductKey

JOIN ReturnsData RD ON RD.ProductKey = P.ProductKey

SELECT TOP 1* FROM Products
SELECT TOP 1* FROM ReturnsData
SELECT TOP 1* FROM SalesTable

SELECT  CONCAT(FirstName, ' ', LastName) AS Customers_FullName, SUM( OrderQuantity*ProductPrice) AS Total_Amount
        FROM Customer
JOIN Orders ON Customer.CustomerKey = Orders.CustomerKey
JOIN Products ON Orders.ProductKey = Products.ProductKey
WHERE OrderQuantity*ProductPrice > 10000

SELECT CONCAT(FirstName, ' ',LastName) Customers_FullName,
SUM(OrderQuantity * ProductPrice) AS Total_Amount
FROM Customers C
JOIN Orders O ON C.Customerkey = 0.Customerkey
JOIN Product P ON 0.ProductKey = P.ProductKey
WHERE OrderQuantity * ProductPrice > 1000
GROUP BY FirstName, LastName
tal_ Amount DESC
